rpm5<-c(8,4,5,6)
rpm10<-c(14,5,6,9)
rpm15<-c(14,6,9,2)
rpm20<-c(17,9,3,6)
grainsize<-c(rpm5,rpm10,rpm15,rpm20)
n<-rep(4,4)
gr<-c("rpm5","rpm10","rpm15","rpm20")
rpms<-rep(gr,each=4)
grc<-c("Furnace1","Furnace2","Furnace3","Furnace4")
Furnaces<-rep(grc,4)
data1<-data.frame(grainsize=grainsize,rpms=factor(rpms),Furnaces=factor(Furnaces))
#data1
aov.1<-aov(grainsize~rpms+Furnaces,data1)
summary(aov.1)
Tukey<-TukeyHSD(aov.1)
library(agricolae)
LSD<-LSD.test(aov.1,"rpms",p.adj="bonferroni",main="Grain Size with different RPMs")
par(mfrow=c(1,4))
plot(aov.1)
rpm5<-c(8,4,5,6)
rpm10<-c(14,5,6,9)
rpm15<-c(14,6,9,2)
rpm20<-c(17,9,3,6)
grainsize<-c(rpm5,rpm10,rpm15,rpm20)
n<-rep(4,4)
gr<-c("rpm5","rpm10","rpm15","rpm20")
rpms<-rep(gr,each=4)
grc<-c("Furnace1","Furnace2","Furnace3","Furnace4")
Furnaces<-rep(grc,4)
data1<-data.frame(grainsize=grainsize,rpms=factor(rpms),Furnaces=factor(Furnaces))
#data1
aov.1<-aov(grainsize~rpms+Furnaces,data1)
summary(aov.1)
Tukey<-TukeyHSD(aov.1)
library(agricolae)
LSD<-LSD.test(aov.1,"rpms",p.adj="bonferroni",main="Grain Size with different RPMs")
par(mfrow=c(1,4))
plot(aov.1)
d4<-c(10,6,6,6,6)
d6<-c(7,6,6,1,6)
d8<-c(5,3,3,2,5)
d10<-c(6,4,4,2,3)
focustime<-c(d4,d6,d8,d10)
n<-rep(4,5)
gr<-c("d4","d6","d8","d10")
distance<-rep(gr,each=5)
grc<-c("Subject1","Subject2","Subject3","Subject4","Subject5")
subject<-rep(grc,5)
data1<-data.frame(focustime=focustime,distance=factor(distance),subject=factor(subject))
#data1
aov.1<-aov(focustime~distance+subject,data1)
summary(aov.1)
d4<-c(10,6,6,6,6)
d6<-c(7,6,6,1,6)
d8<-c(5,3,3,2,5)
d10<-c(6,4,4,2,3)
focustime<-c(d4,d6,d8,d10)
n<-rep(4,4)
gr<-c("d4","d6","d8","d10")
distance<-rep(gr,each=4)
grc<-c("Subject1","Subject2","Subject3","Subject4","Subject5")
subject<-rep(grc,4)
data1<-data.frame(focustime=focustime,distance=factor(distance),subject=factor(subject))
d4<-c(10,6,6,6,6)
d6<-c(7,6,6,1,6)
d8<-c(5,3,3,2,5)
d10<-c(6,4,4,2,3)
focustime<-c(d4,d6,d8,d10)
n<-rep(5,4)
gr<-c("d4","d6","d8","d10")
distance<-rep(gr,each=4)
grc<-c("Subject1","Subject2","Subject3","Subject4","Subject5")
subject<-rep(grc,4)
data1<-data.frame(focustime=focustime,distance=factor(distance),subject=factor(subject))
d4<-c(10,6,6,6,6)
d6<-c(7,6,6,1,6)
d8<-c(5,3,3,2,5)
d10<-c(6,4,4,2,3)
focustime<-c(d4,d6,d8,d10)
n<-rep(5,4)
gr<-c("d4","d6","d8","d10")
distance<-rep(gr,each=5)
grc<-c("Subject1","Subject2","Subject3","Subject4","Subject5")
subject<-rep(grc,5)
data1<-data.frame(focustime=focustime,distance=factor(distance),subject=factor(subject))
install.packages(qcc)
"qcc"
install.packages("qcc")
pistonrings
getwd() # show current working directory
setwd("~/Desktop/TA/TA 321/lab1")
getwd()
help(getwd) # check help document
?getwd      # check help doc
getwd()
# vector
v1 <- c(1,2,5.3,6,-2,4)                  # numeric vector
v2 <- c("one","two","three")             # character vector
v3 <- c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE) # logical vector
v_bad_example <- c(1, "one", TRUE)       # convert different types to character
# matrix
m1 <- matrix(1:20, nrow=5, ncol=4)
m2 <- matrix(1:20, nrow=5, ncol=4, byrow = T)
# arrays
a1 <- array(1:20, dim = c(2,2,5))
# data frames
d1 <- data.frame(v1, v2)
### Guess what would happen for the following codes
v4 <- c(1,2,3,4)
d2 <- data.frame(v1, v4)
# lists
l1 <- list(v1, m1, d1)
# factors
f1 <- factor(c(1,2,3))
# check data type
class(m1)
class(a1)
class(d1)
class(l1)
# Import data files #
```{r}
?mtcars
data(mtcars)
data() # get a list of built-in data
# for csv
mydata <- read.csv(file = "mtcars.csv", header = TRUE)
data(mtcars)                              # load mtcars
mydata <- mtcars                          # assign mtcars to variable mydata
mydata                                    # print data
head(mydata, n = 10)                      # print first 10 rows of data
tail(mydata, n = 5)                       # print last 5 rows of data
dim(mydata)                               # dimsions of an object
class(mydata)                             # data type of an object
names(mydata)                             # list the variables' names in an object
str(mydata)                               # structure of an object
ncol(mydata)                              # number of columns
nrow(mydata)                              # number of rows
# view the data at row 2, col 5
mydata[2,5]                               # through index
mydata[2,"hp"]                            # through name
# view the data at col 5
mydata[,5]
mydata$hp
# view the data at first 3 rows
mydata[1:3,]
mydata[c(1,2,3),]
clear
clc
/clear
# install.packages("ggplot2")             # install ggplot2 package
library("ggplot2")                        # load package
install.packages("ggplot2")
getwd() # show current working directory
setwd("~/Desktop/TA/TA 321/lab1")
getwd() # show current working directory
setwd("~/Desktop/TA/TA 321/lab1")
getwd()
help(getwd) # check help document
?getwd      # check help doc
clc
clear
close
install.package("ggQC")
reps <- 1E6
}
round(data.frame(
N = Ns,
d2 = d2,
E2 = 3/d2,
A2 = 3/(d2*sqrt(Ns)),
d3 = d3,
D3 = ifelse(1 - 3*d3/d2 < 0, 0, 1 - 3*d3/d2),
D4 = 1 + 3*d3/d2
), digits = 3)
controlLimits = function(n,X,R) {
reps <- 1E6
d2 <- R_BAR <- mean(replicate(reps, abs(diff(range(rnorm(2))))))
d3 <- sd(replicate(reps, abs(diff(range(rnorm(2))))))
c(N  = 2,
d3 = d3,
D3 = ifelse(1 - 3*d3/d2 < 0, 0, 1 - 3*d3/d2),
D4 = 1 + 3*d3/d2
)
}
c(N  = 2,
d3 = d3,
D3 = ifelse(1 - 3*d3/d2 < 0, 0, 1 - 3*d3/d2),
D4 = 1 + 3*d3/d2
)
lcl <- 2+76
LCL = 8+90
LCL = 8
UCLr = D4*r
std = r/d2
std = r / d2
EstStd = r / d2
controlLimits = function(n,x,r) {
reps <- 1E6
d2 <- R_BAR <- mean(replicate(reps, abs(diff(range(rnorm(2))))))
d3 <- sd(replicate(reps, abs(diff(range(rnorm(2))))))
LCLx = x - A2*r
CLx = x
UCLx = x + A2*r
LCLr = D3*r
CLr = r
UCLr = D4*r
EstStd = r / d2
}
LCLr = D3*r
LCLr = D3*r
UCLr = D4*r
EstStd = r / d2
EstStd = r / d2
controlLimits = function(n,x,r) {
reps <- 1E6
d2 <- R_BAR <- mean(replicate(reps, abs(diff(range(rnorm(2))))))
d3 <- sd(replicate(reps, abs(diff(range(rnorm(2))))))
LCLx = x - A2*r
CLx = x
UCLx = x + A2*r
LCLr = D3*r
CLr = r
UCLr = D4*r
EstStd = r / d2
}
UCLx = x + A2*r
UCLx = x + A2*r
LCLr = D3*r
LCLx <- x - A2*r
CLx = x
UCLx = x + A2*r
LCLr = D3*r
CLr = r
UCLr = D4*r
EstStd = r / d2
controlLimits = function(n,x,r) {
LCLx <- x - A2*r
CLx = x
UCLx = x + A2*r
LCLr = D3*r
CLr = r
UCLr = D4*r
EstStd = r / d2
}
install.packages("IQCC")
d2(n)
library(IQCC)
d2(3)
d3(2)
A2 = 3/ (d2(n) * sqrt(n))
D3 = ifelse(1 - 3*d3(n)/d2(n) &lt; 0, 0, 1 - 3*d3/d2)
controlLimits(2,3,3)
controlLimits(2,3,3)
2+0+1
2+0+1
2+0+1
1+1
2+0+1
1+1
source('~/Desktop/classPractice.R')
source('~/Desktop/classPractice.R')
1+1
source('~/Desktop/classPractice.R')
print("hello world")
print(hello world)
"
print("hello world")
print("hello world")
my_num <- 201
print("Hello world!")
my_num <- 201
clear
clc
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Los Angeles"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5*12+7
# Assign your name to the variable `my_name`
my_name <- "Michael Mok"
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 650
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Los Angeles"
# Assign your name to the variable `my_name`
my_name <- "Michael Mok"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5*12+7
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 650
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
# Exercise 1: practice with basic R syntax
# Create a variable `hometown` that stores the city in which you were born
hometown <- "Los Angeles"
# Assign your name to the variable `my_name`
my_name <- "Michael Mok"
# Assign your height (in inches) to a variable `my_height`
my_height <- 5*12+7
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 1
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 650
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies*puppy_price
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <- total_cost > 1000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
source('~/Desktop/book-exercises/chapter-05-exercises/exercise-1/exercise.R')
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar("Michael Mok")
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Create a variable `my_name` that contains your name
my_name <- "Michael Mok"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing(my_name, "is programming!")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- (my_name, "is programming!")
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing <- troupper(now_doing)
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Michael Mok"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 5
fav_2 <- 42
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
# Create a variable `sum_round` that is the sum of the rounded values
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1,1)
round_2 <- round(fav_2,1)
round_2 <- round(fav_2,2)
round_2 <- round(fav_2,1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
which_is_bigger <- max(round_sum, sum_round)
# Exercise 1: calling built-in functions
# Create a variable `my_name` that contains your name
my_name <- "Michael Mok"
# Create a variable `name_length` that holds how many letters (including spaces)
# are in your name (use the `nchar()` function)
name_length <- nchar(my_name)
# Print the number of letters in your name
print(name_length)
# Create a variable `now_doing` that is your name followed by "is programming!"
# (use the `paste()` function)
now_doing <- paste(my_name, "is programming!")
# Make the `now_doing` variable upper case
now_doing <- toupper(now_doing)
### Bonus
# Pick two of your favorite numbers (between 1 and 100) and assign them to
# variables `fav_1` and `fav_2`
fav_1 <- 5
fav_2 <- 42
# Divide each number by the square root of 201 and save the new value in the
# original variable
fav_1 <- fav_1 / sqrt(201)
fav_2 <- fav_2/sqrt(201)
# Create a variable `raw_sum` that is the sum of the two variables. Use the
# `sum()` function for practice.
raw_sum <- sum(fav_1, fav_2)
# Create a variable `round_sum` that is the `raw_sum` rounded to 1 decimal place.
# Use the `round()` function.
round_sum <- round(raw_sum, 1)
# Create two new variables `round_1` and `round_2` that are your `fav_1` and
# `fav_2` variables rounded to 1 decimal places
round_1 <- round(fav_1,1)
round_2 <- round(fav_2,1)
# Create a variable `sum_round` that is the sum of the rounded values
sum_round <- sum(round_1, round_2)
# Which is bigger, `round_sum` or `sum_round`? (You can use the `max()` function!)
which_is_bigger <- max(round_sum, sum_round)
calculate_ratio <- function(x, y) {
ratio <- x / y
return(ratio)
}
calculate_ratio(60, 12)
greet <- paste("Hello I am a", year, "year and my major is", major, ".")
intro <- function(year, major) {
greet <- paste("Hello I am a", year, "year and my major is", major, ".")
return(greet)
}
# Call intro() function
intro("fourth","industrial engineering")
return(days_remaining)  # return 'days_remaining' variable
days_to_deadline <- function(deadline, today) {  # definte function 'days_to_deadline()' that takes in a deadline and subrtacts it by a the given date
days_remaining <- as.Date(deadline) - as.Date(today)  # assign the difference of the deadline and today to the variable 'days_remaining'
return(days_remaining)  # return 'days_remaining' variable
}
a2_days_left <- days_to_deadline("2020-01-23", "2020-01-14")
a2_days_left
winter_finals_end <- days_to_deadline("2020-03-20", "2020-01-14")
winter_finals_end
july_fourth <- days_to_deadline("2020-07-04", "2020-01-14")
july_fourth
greet <- paste(paste("Hello I am a", year, "year and my major is", major), ".", sep = "")
intro <- function(year, major) {
greet <- paste(paste("Hello I am a", year, "year and my major is", major), ".", sep = "")
return(greet)
}
# Call intro() function
intro("fourth","industrial engineering")
install.packages("dplyr")
install.packages(c("agricolae", "AlgDesign", "assertthat", "BH", "boot", "class", "classInt", "clipr", "cluster", "coda", "codetools", "colorspace", "deldir", "digest", "DoE.base", "e1071", "expm", "fansi", "forcats", "foreign", "FrF2", "ggplot2", "glue", "gmp", "haven", "highr", "hms", "htmltools", "httpuv", "igraph", "KernSmooth", "labelled", "later", "lmtest", "MASS", "Matrix", "mgcv", "mime", "miscTools", "nlme", "numbers", "pillar", "pkgconfig", "plyr", "polynom", "prettyunits", "progress", "promises", "R6", "readxl", "rJava", "rlang", "rpart", "rstudioapi", "scales", "sfsmisc", "shiny", "sp", "spData", "spdep", "stringi", "survival", "tibble", "tidyselect", "vcd", "xtable", "zoo"))
install.packages("tidyselect")
install.packages("rvest")
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages("rlang")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages("rlang")
install.packages("rlang")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
setwd("~/Desktop/book-exercises/chapter-11-exercises/exercise-1")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
update.packages(rlang)
update.packages("rlang")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
uninstall.packages("rlang")
remove.packages("rlang")
