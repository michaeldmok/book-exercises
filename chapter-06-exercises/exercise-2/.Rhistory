# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1,13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
fruits <- substr(lyric, 15, nchar(lyric))
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- sub(lyric, "a", "e")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(lyric, "a", "e")
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(lyric, "a", "e")
fruits_e <- 1
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", lyric)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "e", fruits)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
lyric_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
lyric_e
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
lyric_o <- paste(intro, fruits_o)
lyric_o
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- function(x) {
greater_value <- x + 3
return(greater_value)
}
y<-add_three(2)
y
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
inches <- inches + feet * 12
cm <- inches * 2.54
m <- cm / 100
return(m)
}
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters(5,7)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,7)
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-2/exercise.R')
source('~/Desktop/book-exercises/chapter-06-exercises/exercise-3/exercise.R')
(5*12+7) * 2.54 /100
names
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("Sarah", "Chloe")
names
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- 10:49
# Use the `length()` function to get the number of elements in `n`
length(n)
n
# Add 1 to each element in `n` and print the result
n <- n + 1
n
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- seq(10,1)
# Subtract `m` FROM `n`. Note the recycling!
n-m
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5,10,by=0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave = cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave + sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21,30)
source('~/Desktop/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten,next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[10]
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2,5]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
source('~/Desktop/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
# Create a vector `even` that holds the even numbers from 1 to 100
even <- seq(2,100,by=2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
is_even <- even %% 2 = 0
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
is_even <- even %% 2 == 0
all(is_even)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- (8,6,7,5,3,0,9)
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8,6,7,5,3,0,9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- (phone_numbers(1:3))
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers(1:3))
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers(1:3)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- phone_numbers[1:3]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers < 5]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers =< 5]
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- phone_numbers[phone_numbers <= 5]
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- phone_numbers[phone_numbers > 5]
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even %% 2 == 0)
source('~/Desktop/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
test <- 1:10
test[test > 5] <- 5
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[phone_numbers > 5] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers %% 2 == 1] <- 0
source('~/Desktop/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
source('~/Desktop/book-exercises/chapter-07-exercises/exercise-2/exercise.R')
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c(coffee, yogurt)
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("my_breakfast", "my_lunch")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("coffee", "yogurt")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("coffee", "burger")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("my_breakfast", "my_lunch")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- "Dinner"
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(hello = "my_breakfast", "my_lunch")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast = "breakfast", my_lunch = "lunch")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- my_dinner = "dinner"
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- my_dinner = "dinner"
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- "dinner"
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- "dinner" = my_dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner["coffe", "food"]
meals[[3]] <- "dinner" = my_dinner
meals[[3]] <- "dinner"
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffe", "food")
meals[[3]] <- "dinner" = my_dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffee", "food")
meals[[3]] <- "dinner" = my_dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffe", "food")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffee", "food")
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffee", "food")
meals[[3]] <- "dinner" = my_dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
my_dinner <- c("coffee", "food")
meals[[3]] <- "dinner" = my_dinner
meals[3] <- "dinner" = my_dinner
meals[3] <- ("dinner" = my_dinner)
meals[[3]] <- ("dinner" = my_dinner)
?list
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("coffee", "yogurt")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("coffee", "burger")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- ("dinner" = c("coffee", "food"))
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("coffee", "yogurt")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("coffee", "burger")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list("breakfast" = my_breakfast, "lunch" = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[3]] <- ("dinner" = c("coffee", "food"))
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals[[dinner]] <- ("dinner" = c("coffee", "food"))
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("coffee", "food"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("coffee", "food"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("coffee", "food"))
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("coffee", "food")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("coffee", "yogurt")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("coffee", "burger")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("coffee", "food")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- list(meals[1:2])
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals[1:5]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals[1:5]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lappy(meals, length(meals[1:5]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals[1:5]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals[1]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length(meals[[1]]))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, 1
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, 1)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length())
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lapply()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
return(meal)
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
source('~/Desktop/book-exercises/chapter-08-exercises/exercise-1/exercise.R')
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
