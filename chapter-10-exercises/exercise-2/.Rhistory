salaries_for_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_for_2017, annual_salary_adjustments)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_for_2017, annual_salary_adjustments, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_for_2018 <- salareis$salaries_for_2017 - salaries$annual_salary_adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_for_2018 <- salaries$salaries_for_2017 - salaries$annual_salary_adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_for_2018 <- salaries$salaries_for_2017 + salaries$annual_salary_adjustments
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_for_2018 <- salaries$salaries_for_2017 + salaries$annual_salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_for_2018 > salaries$salaries_for_2017
# What was the 2018 salary of Employee 57
salaries["Employee 57", "salaries_for_2018"]
# What was the 2018 salary of Employee 57
salaries[employees = "Employee 57", "salaries_for_2018"]
# What was the 2018 salary of Employee 57
salaries[employees = "Employee 57", "salaries_for_2018"]
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_for_2018"]
# What was the average salary change?
mean(annual_salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(annual_salary_adjustments[annual_salary_adjustments < 0])
# What was the dollar value of the highest raise?
max(annual_salary_adjustments)
# What was the largest decrease in salaries between the two years?
min(annual_salary_adjustments)
print(salaries)
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_for_2018"]
# How many employees got a raise?
salaries[salaries$got_raise == T, ]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == T, ])
# What was the dollar value of the highest raise?
highest_raise <- max(annual_salary_adjustments)
# What was the "name" of the employee who received the highest raise?
print(salaries[salaries$annual_salary_adjustments == highest_raise], employees)
# What was the "name" of the employee who received the highest raise?
print(salaries[salaries$annual_salary_adjustments == highest_raise], "employees")
# What was the "name" of the employee who received the highest raise?
print(salaries[salaries$annual_salary_adjustments == highest_raise, "employees"])
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(annual_salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
print(salaries[salaries$annual_salary_adjustments == largest_decrease, "empolyees"])
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(annual_salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
print(salaries[salaries$annual_salary_adjustments == largest_decrease, "empolyees"])
# What was the name of the employee who recieved largest decrease in salary?
print(salaries[salaries$annual_salary_adjustments == largest_decrease, "employees"])
# For people who did not get a raise, how much money did they lose on average?
mean(annual_salary_adjustments[annual_salary_adjustments < 0])
source('~/Desktop/a3-using-data-michaeldmok/assignment.R')
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, "ta"])
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, "ta"])
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
getwd
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
getwd()
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv(data/gates_money.csv)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
read.csv('data/gates_money.csv')
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv')
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- organization[, "organization"]
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv('data/gates_money.csv', stringsAsFactors = F)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
class(organization)
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grant[, "total_amoung"])
# What was the mean grant value?
mean(grant[, "total_amount"])
# What was the mean grant value?
mean(grants[, "total_amount"])
# What was the dollar amount of the largest grant?
max(grants[, "total_amount"])
# What was the dollar amount of the smallest grant?
min(grants[, "total_amount"])
# What was the mean grant value?
averger_value <- mean(grants[, "total_amount"])
# What was the dollar amount of the largest grant?
largest_grant <- max(grants[, "total_amount"])
# What was the dollar amount of the smallest grant?
smallest_grant <- min(grants[, "total_amount"])
# Which organization received the largest grant?
print(grants[grants$total_amount == largest_grant, "organization"])
# Which organization received the smallest grant?
print(grants[grants$total_amount == smallest_grant, "organization"])
# How many grants were awarded in 2010?
print(nrow(grants))
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == 2010, ])
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == 2010, ])
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == "2010", ])
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == "2010", ])
# How many grants were awarded in 2010?
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == "2010", ])
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == "2010", ]))
# How many grants were awarded in 2010?
print(nrow(grants[grants$start_year == "2010", ]))
source('~/Desktop/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
getwd()
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
source('~/Desktop/a3-using-data-michaeldmok/assignment.R')
# 10
ta_grades[ta_grades$math_grade > 4, ] <- 4
# 10
ta_grades[ta_grades$math_grade > 4, ] <- 4
# 10
ta_grades[ta_grades$math_grade > 4, ] <- 4.0
# 2
math_grades <- rnorm(8, 3.6, 0.4)
# 3
spanish_grades <- rnorm(8, 3.8, 0.25)
# 4
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# 5
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has 8 rows and 3 cols:", colnames_string)
print(table_description)
# 6
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
# 7
ta_grades$better_at_math <- math_grades > spanish_grades
# 8
print(ta_grades[c(T, F, F, F, F, F, F, F), ])
View(ta_grades)
# 2
math_grades <- rnorm(8, 3.6, 0.4)
# 3
spanish_grades <- rnorm(8, 3.8, 0.25)
# 4
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# 5
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has 8 rows and 3 cols:", colnames_string)
print(table_description)
# 6
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
# 7
ta_grades$better_at_math <- math_grades > spanish_grades
# 8
print(ta_grades[c(T, F, F, F, F, F, F, F), ])
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
# 10
ta_grades[ta_grades$math_grade > 4, ] <- 4.0
# 2
math_grades <- rnorm(8, 3.6, 0.4)
# 3
spanish_grades <- rnorm(8, 3.8, 0.25)
# 4
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
# 5
colnames_string <- paste(colnames(ta_grades), collapse = ", ")
table_description <- paste("The grade data frame has 8 rows and 3 cols:", colnames_string)
print(table_description)
# 6
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
# 7
ta_grades$better_at_math <- math_grades > spanish_grades
# 8
print(ta_grades[c(T, F, F, F, F, F, F, F), ])
# 9
num_better_at_math <- nrow(ta_grades[ta_grades$better_at_math == TRUE, ])
# 10
ta_grades[ta_grades$math_grade > 4, "math_grade"] <- 4.0
ta_grades[ta_grades$spanish_grade > 4, "spanish_grade"] <- 4.0
setwd("~/Desktop/a3-using-data-michaeldmok")
# 11
write.csv(ta_grades, "data/grade.data.csv")
# 11
write.csv(ta_grades, "data/grade.data.csv")
styler:::style_active_file()
?styler
style_file()
style_file(assignment.R)
style_file("assignment.R")
style_file("assignment.R")
library(styler)
library("styler")
style_file("assignment.R")
style_file("assignment.R")
style_file("assignment.R")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-2")
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_for_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
annual_salary_adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_for_2017, annual_salary_adjustments, stringsAsFactors = F)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_for_2018 <- salaries$salaries_for_2017 + salaries$annual_salary_adjustments
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$salaries_for_2018 > salaries$salaries_for_2017
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_for_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == T, ])
# What was the dollar value of the highest raise?
highest_raise <- max(annual_salary_adjustments)
# What was the "name" of the employee who received the highest raise?
print(salaries[salaries$annual_salary_adjustments == highest_raise, "employees"])
# What was the largest decrease in salaries between the two years?
largest_decrease <- min(annual_salary_adjustments)
# What was the name of the employee who recieved largest decrease in salary?
print(salaries[salaries$annual_salary_adjustments == largest_decrease, "employees"])
# What was the average salary change?
mean(annual_salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(annual_salary_adjustments[annual_salary_adjustments < 0])
# Write a .csv file of your salary data to your working directory
write.csv(salaries, "salaries.csv")
# 1
data("Titanic")
# 1
data("Titanic")
View(Titanic)
as.data.frame(Titanic)
# 1
data("Titanic")
ss.data.frame(Titanic)
is.data.frame(Titanic)
# 3
Titanic_df <- as.data.frame(Titanic, stringsAsFactors = F)
# 3
titanic_df <- as.data.frame(Titanic, stringsAsFactors = F)
# 1
data("Titanic")
# 2
is.data.frame(Titanic)
# 3
titanic_df <- as.data.frame(Titanic, stringsAsFactors = F)
# 4
children <- titanic_df[titanic_df$Age == "Child", ]
View(children)
# 5
num_children <- sum(children[, "Freq"])
View(num_children)
View(children)
35+17+5+11+13+1+13+14
print(num_children)
# 6
number_losses <- max(titanic_df[, "Freq"])
most_losses <- titanic_df[titanic_df$Freq == max(titanic_df[, "Freq"], ]
most_losses <- titanic_df[titanic_df$Freq == max(titanic_df[, "Freq"])
most_losses <- titanic_df[titanic_df$Freq == max(titanic_df[, "Freq"]), ]
most_losses <- titanic_df[titanic_df$Freq == number_losses, ]
# 1
data("Titanic")
# 2
is.data.frame(Titanic)
# 3
titanic_df <- as.data.frame(Titanic, stringsAsFactors = F)
# 4
children <- titanic_df[titanic_df$Age == "Child", ]
# 5
num_children <- sum(children[, "Freq"])
print(num_children)
# 6
# number_losses <- max(titanic_df[, "Freq"])
most_losses <- titanic_df[titanic_df$Freq == max(titanic_df[, "Freq"]), ]
print(most_losses)
View(titanic_df)
titanic_df[titanic_df$Survived == "Yes", ]
deceased <- titanic_df[titanic_df$Survived == "No", ]
View(titanic_df[titanic_df$Surived == "Yes", ])
titanic_df[titanic_df$Surived == "Yes", ]
titanic_df[titanic_df$Survived == "Yes", ]
View(titanic_df[titanic_df$Survived == "Yes", ])
num_men_survived <- deceased[deceased$Sex = "Male", ]
deceased[deceased$Sex = "Male", ]
deceased[deceased$Sex == "Male", ]
sum(deceased[deceased$Sex == "Male", ][, "Freq"])
35+118+154+387+670
sum(deceased[deceased$Sex == "Male" && deceased$Class == "1st", ][, "Freq"])
deceased[deceased$Sex == "Male" && deceased$Class == "3rd", ]
deceased[deceased$Sex == "Male", ]
deceased[(deceased$Sex == "Male" && deceased$Class == "3rd"), ]
deceased[(deceased$Sex == "Male" & deceased$Class == "3rd"), ]
deceased[deceased$Sex == "Male" & deceased$Class == "3rd", ]
sum(deceased[deceased$Sex == "Male" & deceased$Class == "1st", ][, "Freq"])
sum(deceased[deceased$Sex != "Male" & deceased$Class == "1st", ][, "Freq"])
View(deceased)
sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == "3rd", ][, "Freq"])
sum(survivors[survivors$Sex == "Male" & survivors$Class == "3rd", ][, "Freq"])/sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == "3rd", ][, "Freq"])
# 7
# Takes in a ticket class (a string such as "1st" or "2nd") as an argument
# Returns a sentence (string) describing the survival rates of (adult) men vs.
# that of the combined "women and children" within that ticketing class
calc_survival_rate <- function(class_input) {
survivors <- titanic_df[titanic_df$Survived == "Yes", ] # create a subframe of survivors
#deceased <- titanic_df[titanic_df$Survived == "No", ] # create a subframe of people who died
# sums total men survived by given class
num_men_survived <- sum(survivors[survivors$Sex == "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total woman and children survived by given class
num_women_children_survived <- sum(survivors[survivors$Sex != "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total men died by given class
#num_men_died <- sum(deceased[deceased$Sex == "Male" & deceased$Class == class_input, ][, "Freq"])
# sums total woman and children died by given class
#num_women_children_died <- sum(deceased[deceased$Sex != "Male" & deceased$Class == class_input, ][, "Freq"])
# calculate percent of men who lived
percent_men_lived <- num_men_survived / sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_women_children_lived <- num_women_children_survived / sum(titanic_df[titanic_df$Sex != "Male" & titanic_df$Class == class_input, ][, "Freq"])
# "Of 3rd class, 16% of men survived and 42% of women and children survived."
return(paste0("Of ", class_input, " class ", percent_men_lived, "% of men survived and ", percent_women_children_lived, "% of women and children survived."))
}
calc_survival_rate("3rd")
round(0.17254901960784, 2)
# 7
# Takes in a ticket class (a string such as "1st" or "2nd") as an argument
# Returns a sentence (string) describing the survival rates of (adult) men vs.
# that of the combined "women and children" within that ticketing class
calc_survival_rate <- function(class_input) {
survivors <- titanic_df[titanic_df$Survived == "Yes", ] # create a subframe of survivors
# sums total men survived by given class
num_men_survived <- sum(survivors[survivors$Sex == "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total woman and children survived by given class
num_women_children_survived <- sum(survivors[survivors$Sex != "Male" & survivors$Class == class_input, ][, "Freq"])
# calculate percent of men and woman/children who lived
percent_men_lived <- num_men_survived / sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_women_children_lived <- num_women_children_survived / sum(titanic_df[titanic_df$Sex != "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_men_lived <- round(percent_men_lived, 2) * 10 # round number to 2 decimals then turn to percentage
percent_women_children_lived <- round(percent_women_children_lived, 2) * 10
# "Of 3rd class, 16% of men survived and 42% of women and children survived."
return(paste0("Of ", class_input, " class ", percent_men_lived, "% of men survived and ", percent_women_children_lived, "% of women and children survived."))
}
calc_survival_rate("3rd")
# 7
# Takes in a ticket class (a string such as "1st" or "2nd") as an argument
# Returns a sentence (string) describing the survival rates of (adult) men vs.
# that of the combined "women and children" within that ticketing class
calc_survival_rate <- function(class_input) {
survivors <- titanic_df[titanic_df$Survived == "Yes", ] # create a subframe of survivors
# sums total men survived by given class
num_men_survived <- sum(survivors[survivors$Sex == "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total woman and children survived by given class
num_women_children_survived <- sum(survivors[survivors$Sex != "Male" & survivors$Class == class_input, ][, "Freq"])
# calculate percent of men and woman/children who lived
percent_men_lived <- num_men_survived / sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_women_children_lived <- num_women_children_survived / sum(titanic_df[titanic_df$Sex != "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_men_lived <- round(percent_men_lived, 2) * 100 # round number to 2 decimals then turn to percentage
percent_women_children_lived <- round(percent_women_children_lived, 2) * 100
# "Of 3rd class, 16% of men survived and 42% of women and children survived."
return(paste0("Of ", class_input, " class ", percent_men_lived, "% of men survived and ", percent_women_children_lived, "% of women and children survived."))
}
# 8
print(calc_survival_rate("1st"))
# 8
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
data("Titanic")
# 2
is.data.frame(Titanic)
# 3
titanic_df <- as.data.frame(Titanic, stringsAsFactors = F)
# 4
children <- titanic_df[titanic_df$Age == "Child", ]
# 5
num_children <- sum(children[, "Freq"])
print(num_children)
# 6
most_losses <- titanic_df[titanic_df$Freq == max(titanic_df[, "Freq"]), ]
print(most_losses)
# 7
# Takes in a ticket class (a string such as "1st" or "2nd") as an argument
# Returns a sentence (string) describing the survival rates of (adult) men vs.
# that of the combined "women and children" within that ticketing class
calc_survival_rate <- function(class_input) {
survivors <- titanic_df[titanic_df$Survived == "Yes", ] # create a subframe of survivors
# sums total men survived by given class
num_men_survived <- sum(survivors[survivors$Sex == "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total woman and children survived by given class
num_women_children_survived <- sum(survivors[survivors$Sex != "Male" & survivors$Class == class_input, ][, "Freq"])
# calculate percent of men and woman/children who lived
percent_men_lived <- num_men_survived / sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_women_children_lived <- num_women_children_survived / sum(titanic_df[titanic_df$Sex != "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_men_lived <- round(percent_men_lived, 2) * 100 # round number to 2 decimals then turn to percentage
percent_women_children_lived <- round(percent_women_children_lived, 2) * 100
# "Of 3rd class, 16% of men survived and 42% of women and children survived."
return(paste0("Of ", class_input, " class ", percent_men_lived, "% of men survived and ", percent_women_children_lived, "% of women and children survived."))
}
# 8
print(calc_survival_rate("1st"))
# 8
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
# 7
# Takes in a ticket class (a string such as "1st" or "2nd") as an argument
# Returns a sentence (string) describing the survival rates of (adult) men vs.
# that of the combined "women and children" within that ticketing class
calc_survival_rate <- function(class_input) {
survivors <- titanic_df[titanic_df$Survived == "Yes", ] # create a subframe of survivors
# sums total men survived by given class
num_men_survived <- sum(survivors[survivors$Sex == "Male" & survivors$Class == class_input, ][, "Freq"])
# sums total woman and children survived by given class
num_women_children_survived <- sum(survivors[survivors$Sex != "Male" & survivors$Class == class_input, ][, "Freq"])
# calculate percent of men and woman/children who lived
percent_men_lived <- num_men_survived / sum(titanic_df[titanic_df$Sex == "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_women_children_lived <- num_women_children_survived / sum(titanic_df[titanic_df$Sex != "Male" & titanic_df$Class == class_input, ][, "Freq"])
percent_men_lived <- round(percent_men_lived, 2) * 100 # round number to 2 decimals then turn to percentage
percent_women_children_lived <- round(percent_women_children_lived, 2) * 100
# "Of 3rd class, 16% of men survived and 42% of women and children survived."
return(paste0("Of ", class_input, " class, ", percent_men_lived, "% of men survived and ", percent_women_children_lived, "% of women and children survived."))
}
# 8
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
